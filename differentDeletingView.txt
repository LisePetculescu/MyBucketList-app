const handleEditNote = (note) => {
  setSelectedNote(note);
  setTitle(note.title);
  setContent(note.content);
  setModalVisible(true);
};

const handleDeleteNote = () => {
  setConfirmDeleteVisible(true); // Show the confirmation overlay
};

const confirmDeleteNote = async () => {
  const updatedNotes = notes.filter((item) => item.id !== selectedNote.id);
  setNotes(updatedNotes);

  const noteRef = doc(firestore, "notes", selectedNote.id);
  await deleteDoc(noteRef);

  setModalVisible(false); // Close the edit modal after deleting the note
  setConfirmDeleteVisible(false); // Close the confirmation overlay
  setSelectedNote(null); // Reset the selected note
};

return (
  <View style={styles.container}>
    <Text style={styles.title}>My Bucketlist üòÅ</Text>

    <ScrollView style={styles.noteList}>
      {notes.map((note, index) => (
        <View key={note.id} style={styles.noteContainer}>
          <View style={styles.noteHeader}>
            <Text style={styles.noteTitle}>
              {index + 1}. {note.title}
            </Text>
            <Pressable onPress={() => handleEditNote(note)} style={styles.editButton}>
              <Text style={styles.editButtonText}>Edit</Text>
            </Pressable>
          </View>
          <Pressable
            onPress={() => {
              setSelectedNote(note);
              setViewModalVisible(true);
            }}
          >
            <Text style={styles.basicText2}>
              {note.content.length > 25 ? note.content.substring(0, 25) + "..." : note.content}
            </Text>
          </Pressable>
        </View>
      ))}
    </ScrollView>

    <Pressable
      style={styles.addButton}
      onPress={() => {
        setTitle("");
        setContent("");
        setModalVisible(true);
      }}
    >
      <Text style={styles.addButtonText}>Add Note</Text>
    </Pressable>

    {/* Modal for creating/editing notes */}
    <Modal visible={modalVisible} animationType="slide" transparent={false}>
      <View style={styles.modalContainerPurple}>
        <TextInput style={styles.detailTitle} placeholder="Enter note title" value={title} onChangeText={setTitle} />
        <TextInput style={styles.detailContent} multiline placeholder="Enter note content" value={content} onChangeText={setContent} />

        {/* Delete button */}
        <Pressable onPress={handleDeleteNote} style={styles.deleteButton}>
          <Text style={styles.buttonText}>Delete</Text>
        </Pressable>

        {/* Conditional overlay confirmation */}
        {confirmDeleteVisible && (
          <View style={styles.confirmationOverlay}>
            <Text style={styles.confirmationText}>Are you sure you want to delete this note?</Text>
            <View style={styles.buttonRow}>
              <Pressable onPress={confirmDeleteNote} style={styles.deleteButton}>
                <Text style={styles.buttonText}>Yes</Text>
              </Pressable>
              <Pressable onPress={() => setConfirmDeleteVisible(false)} style={styles.cancelButton}>
                <Text style={styles.buttonText}>No</Text>
              </Pressable>
            </View>
          </View>
        )}

        <View style={styles.buttonContainer}>
          <Pressable onPress={handleSaveNote} style={styles.saveButton}>
            <Text style={styles.buttonText}>Save</Text>
          </Pressable>
          <Pressable onPress={() => setModalVisible(false)} style={styles.cancelButton}>
            <Text style={styles.buttonText}>Cancel</Text>
          </Pressable>
        </View>
      </View>
    </Modal>
  </View>
);

/* STYLE */
confirmationOverlay: {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  justifyContent: 'center',
  alignItems: 'center',
  backgroundColor: 'rgba(0, 0, 0, 0.5)', // Semi-transparent background
  zIndex: 10, // Ensure it appears on top
},
confirmationText: {
  color: 'white',
  fontSize: 18,
  marginBottom: 20,
},
buttonRow: {
  flexDirection: 'row',
  justifyContent: 'space-between',
  width: '80%',
},
deleteButton: {
  backgroundColor: 'red',
  padding: 10,
  borderRadius: 5,
  marginRight: 10,
},
cancelButton: {
  backgroundColor: 'grey',
  padding: 10,
  borderRadius: 5,
},
buttonText: {
  color: 'white',
  fontWeight: 'bold',
},
